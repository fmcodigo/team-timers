@page "/gamesession/{gameId}"
@using Timers.Shared.ViewModels;
@using Timers.Shared.Services;
@inject GameService gameService

<h2>Team Timers</h2>
<br>

@if (game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BlazorNav IsTabs>
        <BlazorNavLink onclick="@(() => onclickTab(1))" IsActive="@(active == 1)">Players List</BlazorNavLink>
        <BlazorNavLink onclick="@(() => onclickTab(2))" IsActive="@(active == 2)">Timer Controls</BlazorNavLink>
        <BlazorNavLink onclick="@(() => onclickTab(3))" IsActive="@(active == 3)">Game In Progress</BlazorNavLink>
    </BlazorNav>
    <TabContent>
        <TabPane IsOpen="@(active == 1)">
            <br />
            <p>Team: @game.HomeTeam.Name</p>
            <div class="container">
                <div class="row">
                    <div class="col-1">Jersey</div>
                    <div class="col-3">Name</div>
                    <div class="col-1"></div>
                </div>
                @foreach (var player in game.HomeTeam.Players.OrderBy(p => p.Name))
                {
                    <div class="row">
                        <div class="col-1">@player.Jersey</div>
                        <div class="col-3 @player.IsPresent.ToTextListGroupItemPrimary()">@player.Name</div>
                        <div class="col-1">
                            <button onclick="@(e => { player.IsPresent = !player.IsPresent; StateHasChanged(); })" type="button"
                                    class="@player.IsPresent.ToTextBtnPrimary()" aria-label="Toggle player is present">
                                <span class="@player.IsPresent.ToIconCheck()" aria-hidden="true"></span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </TabPane>
        <TabPane IsOpen="@(active == 2)">
            <div class="container">
                <div class="row">
                    <div class="col-4">
                        <p><h6>Home</h6></p>
                        <p>
                            <span class="h2">@game.HomeTeam.Name:</span>
                            <span><NumericBox ValueChanged="@(v=> { game.HomeTeamScore = v; StateHasChanged(); } )" /></span>
                        </p>
                    </div>
                    <div class="col-4">
                        <p><h6>Visitor</h6></p>
                        <p>
                            <span class="h2">@game.VisitorTeam.Name :</span>
                            <span><NumericBox ValueChanged="@(v=> { game.VisitorTeamScore = v; StateHasChanged(); } )" /></span>
                        </p>
                    </div>
                </div>
            </div>
            <br />
            <br />
            <TimerControl SecondsChanged="@(s => TimerEvent(s))" />


        </TabPane>
        <TabPane IsOpen="@(active == 3)">
            <br />
            <p>@game.HomeTeam.Name @game.HomeTeamScore
            - @game.SecondsElapsed.ToTimerString() -
            @game.VisitorTeamScore @game.VisitorTeam.Name</p>
            <br />
            <div class="container">
                <div class="row">
                    <div class="col-1">Jersey</div>
                    <div class="col-3">Name</div>
                    <div class="col-1"></div>
                </div>
                @foreach (var player in game.HomeTeam.Players.OrderBy(p => p.Name).Where(p => p.IsPresent).ToList())
                {
                    <div class="row">
                        <div class="col-1">@player.Jersey</div>
                        <div class="col-3">
                            <button type="button" onclick="@(e => { player.IsPlaying = !player.IsPlaying; StateHasChanged(); })"
                                    class="@player.IsPlaying.ToTextBtnPrimaryBlock()">
                                @player.Name
                            </button>
                        </div>
                        <div class="col-1">@player.SecondsPlayed.ToTimerString()</div>
                    </div>
                }
            </div>
        </TabPane>
    </TabContent>

}


@functions {

[Parameter] protected string gameId { get; set; }

private GameVM game { get; set; }

protected override async Task OnInitAsync()
{
    game = await gameService.GetByIdAsync(new Guid(gameId));
}

// Tabs
private int active = 1;

void onclickTab(int selection)
{
    active = selection;
    StateHasChanged();
}

void TimerEvent(int seconds)
{
    game.SecondsElapsed = seconds;
    game.HomeTeam.Players.Where(p => (p.IsPlaying)).ToList().ForEach(p => p.SecondsPlayed++);
    //BroadcastScoreboard();
    StateHasChanged();
}

}